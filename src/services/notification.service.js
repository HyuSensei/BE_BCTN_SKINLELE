import Notification from "../models/notification.model.js";

export const createNotiByOrder = async ({ recipient, model, order }) => {
  try {
    const payload = {
      title: "üõçÔ∏è ƒê∆°n h√†ng m·ªõi",
      content: `ƒê∆°n h√†ng OD${order._id} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng, SkinLeLe c·∫£m ∆°n qu√Ω kh√°ch h√†ng ‚ù§Ô∏è`,
      metadata: {
        link: `/order-detail/${order._id}`,
      },
    };
    const noti = await Notification.create({ recipient, model, ...payload });

    return noti;
  } catch (error) {
    console.log("Error create notification order: ", error);
    return null;
  }
};

export const createNotiByUpdateStatusOrder = async ({
  recipient,
  model,
  order,
}) => {
  try {
    let title, content;

    switch (order.status) {
      case "processing":
        title = "üîÑ ƒê∆°n h√†ng ƒëang x·ª≠ l√Ω";
        content = `ƒê∆°n h√†ng OD${order._id} ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω, ch√∫ng t√¥i s·∫Ω giao cho ƒë∆°n v·ªã v·∫≠n chuy·ªÉn trong th·ªùi gian s·ªõm nh·∫•t.`;
        break;

      case "shipping":
        title = "üöö ƒê∆°n h√†ng ƒëang giao";
        content = `ƒê∆°n h√†ng OD${order._id} ƒë√£ ƒë∆∞·ª£c giao cho ƒë∆°n v·ªã v·∫≠n chuy·ªÉn, vui l√≤ng ƒë·ªÉ √Ω ƒëi·ªán tho·∫°i nh√©!`;
        break;

      case "delivered":
        title = "‚úÖ ƒê∆°n h√†ng ƒë√£ giao";
        content = `ƒê∆°n h√†ng OD${order._id} ƒë√£ giao th√†nh c√¥ng. C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng SkinLeLe ‚ù§Ô∏è`;
        break;

      case "cancelled":
        title = "‚ùå ƒê∆°n h√†ng ƒë√£ h·ªßy";
        content = `ƒê∆°n h√†ng OD${order._id} ƒë√£ b·ªã h·ªßy. L√Ω do: ${order.cancelReason}`;
        break;

      default:
        return null;
    }

    const noti = await Notification.create({
      recipient,
      model,
      type: "STORE",
      title,
      content,
      metadata: {
        link: `/order-detail/${order._id}`,
      },
    });

    return noti;
  } catch (error) {
    console.log("Error create notification update order: ", error);
    return null;
  }
};

export const createNotiByBooking = async ({ booking }) => {
  try {
    const payloadCustomer = {
      title: "üè• ƒê·∫∑t l·ªãch th√†nh c√¥ng",
      content: `L·ªãch kh√°m BK${booking._id} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng. Vui l√≤ng ch·ªù b√°c sƒ© x√°c nh·∫≠n!`,
      type: "BOOKING",
      metadata: {
        link: `/booking-detail/${booking._id}`,
      },
    };

    const payloadDoctor = {
      title: "üè• L·ªãch kh√°m m·ªõi",
      content: `B·∫°n c√≥ l·ªãch kh√°m m·ªõi BK${booking._id} t·ª´ ${booking.customer.name}`,
      type: "BOOKING",
      metadata: {
        link: `/doctor-owner?tab=bookings&id=${booking._id}`,
      },
    };

    const [notiCustomer, notiDoctor] = await Promise.all([
      Notification.create({
        recipient: booking.user,
        model: "User",
        ...payloadCustomer,
      }),
      Notification.create({
        recipient: booking.doctor._id,
        model: "Doctor",
        ...payloadDoctor,
      }),
    ]);
    return { notiCustomer, notiDoctor };
  } catch (error) {
    console.log("Error create notification booking: ", error);
    return null;
  }
};

export const createNotiByUpdateStatusBooking = async ({
  recipient,
  model,
  booking,
}) => {
  try {
    let payload;

    if (model === "User") {
      switch (booking.status) {
        case "confirmed":
          payload = {
            title: "‚úÖ L·ªãch kh√°m ƒë∆∞·ª£c x√°c nh·∫≠n",
            content: `B√°c sƒ© ƒë√£ x√°c nh·∫≠n l·ªãch kh√°m BK${booking._id}. Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù!`,
            type: "BOOKING",
            metadata: {
              link: `/booking-detail/${booking._id}`,
            },
          };
          break;

        case "completed":
          payload = {
            title: "üéâ Ho√†n th√†nh kh√°m",
            content: `L·ªãch kh√°m BK${booking._id} ƒë√£ ho√†n th√†nh. C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng ‚ù§Ô∏è`,
            type: "BOOKING",
            metadata: {
              link: `/booking-detail/${booking._id}`,
            },
          };
          break;

        case "cancelled":
          if (booking.cancelReason) {
            payload = {
              title: "‚ùå L·ªãch kh√°m b·ªã h·ªßy",
              content: `L·ªãch kh√°m BK${booking._id} ƒë√£ b·ªã h·ªßy. L√Ω do: ${booking.cancelReason}`,
              type: "BOOKING",
              metadata: {
                link: `/booking-detail/${booking._id}`,
              },
            };
          }
          break;
      }
    } else if (model === "Doctor" && booking.status === "cancelled") {
      payload = {
        title: "‚ùå L·ªãch kh√°m b·ªã h·ªßy",
        content: `B·ªánh nh√¢n ${booking.customer.name} ƒë√£ h·ªßy l·ªãch kh√°m BK${booking._id}. L√Ω do: ${booking.cancelReason}`,
        type: "BOOKING",
        metadata: {
          link: `/doctor-owner?tab=bookings&id=${booking._id}`,
        },
      };
    }

    if (!payload) return null;

    const noti = await Notification.create({
      recipient,
      model,
      ...payload,
    });

    return noti;
  } catch (error) {
    console.log("Error create notification update booking: ", error);
    return null;
  }
};
